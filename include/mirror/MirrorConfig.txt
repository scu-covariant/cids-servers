next_read_interval: [600]s //多少秒之后重新读取配置文件, 需要不停机调试则尽量缩短, 但不建议小于30(半分钟)
mir_heart_beat_interval: [1]s    //心跳的间隔
mir_load_report_interval: [60]   //多少个心跳包后更新负载情况
cli_class_info_cache_time: [600]s //课程信息在cli断联后缓存时间, 如果内存紧张可以适当缩短



mir启动流程
    启动EventLoop, 启动Server, 清空clis_data
    提交任务
        定时读取配置文
        按照更新负载情况的间隔更新load
        心跳任务, 心跳计数器的值从配置表中读取
        启动等待即时消息的线程
    
cli通过tcp连接
    ->连接:从cookie中寻找缓存, 若无则在clis_data中更新其信息, 从数据库拉取课表信息, 并根据课表信息提交一段时间后重新拉取下节课的任务
    ->查询:目前是多线程操作,单查询比联合查询效率更高(可详细测试),且消耗内存更少.故先查询所在校区号与教室地点.再利用该数据查询课程内容与下节课内容
    ->断线:将clis_data的信息存入缓存, 设置
Message
    使用者通过管理程序向数据库中插入即时消息的内容和目的地, 然后发送一个简短报文给center, center收到后
发送udp包给mir, mir接收到包在数据库中读取消息内容和消息目的地和消息过期时间, 将前两者插入到消息队列中并设置定时清空队头的任务

//可能的每晚清空新奇重新启动? 有cli彻夜开着吗?
